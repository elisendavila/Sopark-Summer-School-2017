{"paragraphs":[{"text":"%md\n## Scala: colecciones y programación funcional\n\nEn esta sesión vamos a familizarizarnos con la programación funcional. En particular, con las colecciones y las funciones de orden superior más típicas de la programación funcional.\n\nUsaremos Scala por dos motivos:\n\n1. Es el lenguaje en el que está desarrollado Spark y con el que lo manejaremos posteriormente.\n2. Es un lenguaje de programación funcional _puro_.\n\nSin embargo, este no es un curso de Scala (¡ni de Spark!) y muchos detalles de sintaxis, etc. quedarán _como ejercicio_ (i.e., en el aire).\n\nLo más importante para nosotros serán las nociones generales, la _metaprogramación_ si se quiere, que serán reaprovechables en otros lenguajes y otros contextos. Y también, obviamente, en Spark.","dateUpdated":"2017-06-19T15:23:42+0200","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"results":{},"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Scala: colecciones y programación funcional</h2>\n<p>En esta sesión vamos a familizarizarnos con la programación funcional. En particular, con las colecciones y las funciones de orden superior más típicas de la programación funcional.</p>\n<p>Usaremos Scala por dos motivos:</p>\n<ol>\n  <li>Es el lenguaje en el que está desarrollado Spark y con el que lo manejaremos posteriormente.</li>\n  <li>Es un lenguaje de programación funcional <em>puro</em>.</li>\n</ol>\n<p>Sin embargo, este no es un curso de Scala (¡ni de Spark!) y muchos detalles de sintaxis, etc. quedarán <em>como ejercicio</em> (i.e., en el aire).</p>\n<p>Lo más importante para nosotros serán las nociones generales, la <em>metaprogramación</em> si se quiere, que serán reaprovechables en otros lenguajes y otros contextos. Y también, obviamente, en Spark.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048621_740051624","id":"20170516-160320_89429408","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:277"},{"text":"%md \n### Listas y map\n\nLas listas son _sucesiones_ de valores. Tienen dos operaciones fundamentales asociadas a ellas: `head` y `tail`. Están muy vinculadas con la recursividad.","dateUpdated":"2017-06-19T15:26:44+0200","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Listas y map</h3>\n<p>Las listas son <em>sucesiones</em> de valores. Tienen dos operaciones fundamentales asociadas a ellas: <code>head</code> y <code>tail</code>. Están muy vinculadas con la recursividad.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048625_750824593","id":"20170516-160340_1645493083","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:278"},{"text":"2*2\n","user":"anonymous","dateUpdated":"2017-06-19T15:27:31+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497878818543_-1839045612","id":"20170619-152658_1338011182","dateCreated":"2017-06-19T15:26:58+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3335","dateFinished":"2017-06-19T15:28:03+0200","dateStarted":"2017-06-19T15:27:31+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres0: Int = 4\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497879042435_1265030249","id":"20170619-153042_1370455444","dateCreated":"2017-06-19T15:30:42+0200","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3454","text":"%md\n\n<span style=\"color:red\"> listas estan vinculadas a la recurrencia. Nil (en lugar de NULL). No tiene acceso por indice. si queremos listas conindices hay que usar arrays </span>\n","dateUpdated":"2017-06-19T15:34:28+0200"},{"text":"val miLista = List(1, 2, 3, 4, 5)\n\ndef duplica(l:List[Int]): List[Int] = {\n    if (l == Nil)\n        l\n    else\n        2 * l.head :: duplica(l.tail)\n}\n\nduplica(miLista)","dateUpdated":"2017-06-19T15:34:56+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmiLista: List[Int] = List(1, 2, 3, 4, 5)\n\nduplica: (l: List[Int])List[Int]\n\nres4: List[Int] = List(2, 4, 6, 8, 10)\n"}]},"apps":[],"jobName":"paragraph_1497878048626_751978840","id":"20170516-161150_1442442289","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:279","user":"anonymous","dateFinished":"2017-06-19T15:34:58+0200","dateStarted":"2017-06-19T15:34:56+0200"},{"text":"%md\nPero generalmente, no se realizan así ese tipo de operaciones sino mediante _map[a]s_. La función `map` es una función de orden superior porque acepta como argumento otra función.\n\n<span style=\"color:red\"> aplica la funcion que le pasas como elemento y la aplica a la lista</span>","dateUpdated":"2017-06-19T15:50:23+0200","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"results":{},"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Pero generalmente, no se realizan así ese tipo de operaciones sino mediante <em>map[a]s</em>. La función <code>map</code> es una función de orden superior porque acepta como argumento otra función.</p>\n<span style=\"color:red\"> aplica la funcion que le pasas como elemento y la aplica a la lista</span>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048626_751978840","id":"20170516-161156_1311392631","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:280","user":"anonymous","dateFinished":"2017-06-19T15:34:43+0200","dateStarted":"2017-06-19T15:34:43+0200"},{"text":"miLista.map(2 * _)\n","dateUpdated":"2017-06-19T15:35:01+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres5: List[Int] = List(2, 4, 6, 8, 10)\n"}]},"apps":[],"jobName":"paragraph_1497878048627_751594091","id":"20170516-161154_1958390302","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:281","user":"anonymous","dateFinished":"2017-06-19T15:35:01+0200","dateStarted":"2017-06-19T15:35:01+0200"},{"text":"%md\nScala es bastante flexible y cualquiera de las siguientes versiones (sintácticas) alternativas son válidas:","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Scala es bastante flexible y cualquiera de las siguientes versiones (sintácticas) alternativas son válidas:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048628_749670347","id":"20170516-161154_733645094","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:282"},{"text":"def duplica(x: Int): Int = 2 * x\nmiLista.map(duplica)\n","dateUpdated":"2017-06-19T15:35:58+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nduplica: (x: Int)Int\n\nres6: List[Int] = List(2, 4, 6, 8, 10)\n"}]},"apps":[],"jobName":"paragraph_1497878048628_749670347","id":"20170516-162052_1315000468","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:283","user":"anonymous","dateFinished":"2017-06-19T15:35:59+0200","dateStarted":"2017-06-19T15:35:58+0200"},{"text":"miLista.map(x => 2 * x)","dateUpdated":"2017-06-19T15:36:05+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres7: List[Int] = List(2, 4, 6, 8, 10)\n"}]},"apps":[],"jobName":"paragraph_1497878048629_749285598","id":"20170516-162131_1993805536","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284","user":"anonymous","dateFinished":"2017-06-19T15:36:05+0200","dateStarted":"2017-06-19T15:36:05+0200"},{"text":"miLista map duplica","dateUpdated":"2017-06-19T15:36:07+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres8: List[Int] = List(2, 4, 6, 8, 10)\n"}]},"apps":[],"jobName":"paragraph_1497878048629_749285598","id":"20170516-162150_1611783384","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:285","user":"anonymous","dateFinished":"2017-06-19T15:36:08+0200","dateStarted":"2017-06-19T15:36:07+0200"},{"text":"%md\n\n### Filtros\n\nOtra _operación funcional_ habitual es el filtro. La función `filter` selecciona solo elementos que cumplen un determinado _predicado_.\n\n","dateUpdated":"2017-06-19T15:37:25+0200","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Filtros</h3>\n<p>Otra <em>operación funcional</em> habitual es el filtro. La función <code>filter</code> selecciona solo elementos que cumplen un determinado <em>predicado</em>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048630_750439844","id":"20170516-162156_505732435","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:286"},{"text":"(1 until 25).filter(_ % 2 == 0)","dateUpdated":"2017-06-19T15:36:21+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres9: scala.collection.immutable.IndexedSeq[Int] = Vector(2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24)\n"}]},"apps":[],"jobName":"paragraph_1497878048631_750055095","id":"20170516-164001_2024838113","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:287","user":"anonymous","dateFinished":"2017-06-19T15:36:22+0200","dateStarted":"2017-06-19T15:36:21+0200"},{"text":"// Ejercicio: crea una función (con def) y aplícala a la \"lista\" anterior \n// usando sintaxis alternativas (similares a las usadas con map).\n\ndef triplica(x: Int): Int = 3 * x\nmiLista.map(triplica)\n\n\nmiLista.map(x => 3 * x)\n\nmiLista map triplica\n\n\ndef triplica(l:List[Int]): List[Int] = {\n    if (l == Nil)\n        l\n    else\n        3 * l.head :: triplica(l.tail)\n}\n\nmiLista.map(3 *_)","dateUpdated":"2017-06-19T15:41:21+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ntriplica: (x: Int)Int\n\nres44: List[Int] = List(3, 6, 9, 12, 15)\n\nres47: List[Int] = List(3, 6, 9, 12, 15)\n\nres49: List[Int] = List(3, 6, 9, 12, 15)\n\ntriplica: (l: List[Int])List[Int]\n\nres53: List[Int] = List(3, 6, 9, 12, 15)\n"}]},"apps":[],"jobName":"paragraph_1497878048631_750055095","id":"20170516-164100_1391679443","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:288","user":"anonymous","dateFinished":"2017-06-19T15:41:23+0200","dateStarted":"2017-06-19T15:41:21+0200"},{"text":"%md\n\n### Reducciones\n\nVamos a sumar los pares del 1 al 100 (no incluido).","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Reducciones</h3>\n<p>Vamos a sumar los pares del 1 al 100 (no incluido).</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048632_748131351","id":"20170516-164227_819772067","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:289"},{"text":"val pares = (1 until 100).filter(_ % 2 == 0).toList\n\ndef suma(l: List[Int]): Int = {\n    var acc = 0\n    for (x <- l) acc += x\n    acc\n}\n\nsuma(pares)","dateUpdated":"2017-06-19T15:46:43+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\npares: List[Int] = List(2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98)\n\nsuma: (l: List[Int])Int\n\nres56: Int = 2450\n"}]},"apps":[],"jobName":"paragraph_1497878048632_748131351","id":"20170516-164519_2049675548","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:290","user":"anonymous","dateFinished":"2017-06-19T15:46:44+0200","dateStarted":"2017-06-19T15:46:43+0200"},{"text":"%md\n\nEste tipo de operaciones son muy habituales:\n\n1. Se define un acumulador (0, 1, etc. según el problema).\n2. Se recorre una lista (con un bucle o similar).\n3. En cada iteración, se modifica el acumulador de acuerdo con el valor extraído de la lista. \n\nEn nuestro caso, al acumulador (que se inicia en 0) se le van sumando uno a uno los elementos de la lista.\n\nEse problema puede resolverse también así:\n\n","dateUpdated":"2017-06-19T15:52:11+0200","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"results":{},"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Este tipo de operaciones son muy habituales:</p>\n<ol>\n  <li>Se define un acumulador (0, 1, etc. según el problema).</li>\n  <li>Se recorre una lista (con un bucle o similar).</li>\n  <li>En cada iteración, se modifica el acumulador de acuerdo con el valor extraído de la lista.</li>\n</ol>\n<p>En nuestro caso, al acumulador (que se inicia en 0) se le van sumando uno a uno los elementos de la lista.</p>\n<p>Ese problema puede resolverse también así:</p>\n<span style=\"color:red\">a reduce(f) ---> f(f(f(a1,a2),a3),a4) . la función que se pasa a reduce tiene que ser una función que permita dos argumentos</span>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048633_747746602","id":"20170516-164837_1267803362","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:291","user":"anonymous","dateFinished":"2017-06-19T15:51:55+0200","dateStarted":"2017-06-19T15:51:55+0200"},{"text":"pares.reduce(_+_)\n\n// o también \npares reduce(_+_)\n\n// o\npares reduce ((a,b) => a + b)","dateUpdated":"2017-06-19T15:51:41+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres64: Int = 2450\n\nres67: Int = 2450\n\nres70: Int = 2450\n"}]},"apps":[],"jobName":"paragraph_1497878048633_747746602","id":"20170516-165257_1624679931","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:292","user":"anonymous","dateFinished":"2017-06-19T15:51:41+0200","dateStarted":"2017-06-19T15:51:41+0200"},{"text":"%md \nLa reducción toma como argumento una lista y una función `X x X ---> X`. La función `reduce` la aplica a los dos primeros elementos; luego, al resultado de la operación anterior con el tercero; el resultado con el cuarto, etc.\n\n\n<span style=\"color:red\">a reduce(f) ---> f(f(f(a1,a2),a3),a4) . la función que se pasa a reduce tiene que ser una función que permita dos argumentos</span>","dateUpdated":"2017-06-19T15:52:17+0200","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>La reducción toma como argumento una lista y una función <code>X x X ---&gt; X</code>. La función <code>reduce</code> la aplica a los dos primeros elementos; luego, al resultado de la operación anterior con el tercero; el resultado con el cuarto, etc.</p>\n<span style=\"color:red\">a reduce(f) ---> f(f(f(a1,a2),a3),a4) . la función que se pasa a reduce tiene que ser una función que permita dos argumentos</span>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048649_827774373","id":"20170516-165310_1699278327","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:293","user":"anonymous","dateFinished":"2017-06-19T15:52:17+0200","dateStarted":"2017-06-19T15:52:17+0200"},{"text":"%md\n#### Ejercicio:\nResuelve el primer ejercicio del [proyecto Euler](https://projecteuler.net/archives):\n\n> If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n> Find the sum of all the multiples of 3 or 5 below 1000.\n\nNotas:\n\n1. Plantealo como una sucesión de dos _metaoperaciones_: ¿cuáles?\n2. Es posible que necesites averiguar cómo escribir determinados operadores en Scala. Pregúntale a Google. \n","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Ejercicio:</h4>\n<p>Resuelve el primer ejercicio del <a href=\"https://projecteuler.net/archives\">proyecto Euler</a>:</p>\n<blockquote>\n  <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.<br/>Find the sum of all the multiples of 3 or 5 below 1000.</p>\n</blockquote>\n<p>Notas:</p>\n<ol>\n  <li>Plantealo como una sucesión de dos <em>metaoperaciones</em>: ¿cuáles?</li>\n  <li>Es posible que necesites averiguar cómo escribir determinados operadores en Scala. Pregúntale a Google.</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048649_827774373","id":"20170516-165553_1200720605","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:294"},{"text":"val euler1 = (1 until 1000).filter(x=> x % 3 == 0 ||x % 5==0).toList.reduce(_+_)","user":"anonymous","dateUpdated":"2017-06-19T15:59:37+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497880371695_503912081","id":"20170619-155251_660931810","dateCreated":"2017-06-19T15:52:51+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4463","dateFinished":"2017-06-19T15:58:16+0200","dateStarted":"2017-06-19T15:58:16+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\neuler1: Int = 233168\n"}]}},{"text":"%md\n#### Ejercicio:\n\nEncuentra el máximo de la lista de números 2, 1, 34, 21, 3, 9, 2, 6 (usando `reduce`, claro), y la función que se define a continuación:","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Ejercicio:</h4>\n<p>Encuentra el máximo de la lista de números 2, 1, 34, 21, 3, 9, 2, 6 (usando <code>reduce</code>, claro), y la función que se define a continuación:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048650_828928620","id":"20170516-171232_1535582349","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:295"},{"text":"def max(a: Int, b:Int): Int = if (a > b) a else b\n\nmax(2, 3)\n\n// tu código, debajo","dateUpdated":"2017-06-19T16:07:25+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmax: (a: Int, b: Int)Int\n\nres98: Int = 3\n"}]},"apps":[],"jobName":"paragraph_1497878048650_828928620","id":"20170516-171337_1798892895","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:296","user":"anonymous","dateFinished":"2017-06-19T16:07:25+0200","dateStarted":"2017-06-19T16:07:25+0200"},{"text":"val lista = List(2,1,34,21,9,2,6)\n\nlista.reduce(max(_,_))\n","user":"anonymous","dateUpdated":"2017-06-19T16:07:42+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497880866046_672721614","id":"20170619-160106_547777193","dateCreated":"2017-06-19T16:01:06+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4893","dateFinished":"2017-06-19T16:07:28+0200","dateStarted":"2017-06-19T16:07:28+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nlista: List[Int] = List(2, 1, 34, 21, 9, 2, 6)\n\nres103: Int = 34\n"}]}},{"text":"%md\n\n### Fold\n\nLa función `reduce` es una versión simplificada de otra más general, `fold`, que, a su vez, lo es de otras dos: `foldLeft` y `foldRight`. Con `foldLeft` puedo sumar una lista de números haciendo:","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Fold</h3>\n<p>La función <code>reduce</code> es una versión simplificada de otra más general, <code>fold</code>, que, a su vez, lo es de otras dos: <code>foldLeft</code> y <code>foldRight</code>. Con <code>foldLeft</code> puedo sumar una lista de números haciendo:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048651_828543871","id":"20170516-165706_1796078420","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:297"},{"text":"pares.foldLeft(0)(_+_)\n","dateUpdated":"2017-06-19T16:08:18+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres104: Int = 2450\n"}]},"apps":[],"jobName":"paragraph_1497878048651_828543871","id":"20170516-171058_21090159","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:298","user":"anonymous","dateFinished":"2017-06-19T16:08:19+0200","dateStarted":"2017-06-19T16:08:19+0200"},{"text":"%md\n\nLa función `foldLeft`:\n\n1. Requiere explícitamente que se indique un valor inicial.\n2. `foldLeft` y `foldRight` recorren la lista en una u otra dirección en caso de que la operación no sea conmutativa (y quiera ejecutarse en un determinado orden).\n3. La función que requieren no es, como en `reduce` `X x X ----> X` sino `Y x X -----> Y`. Obviamente, el valor inicial es del tipo `Y`; el resultado, también.","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>La función <code>foldLeft</code>:</p>\n<ol>\n  <li>Requiere explícitamente que se indique un valor inicial.</li>\n  <li><code>foldLeft</code> y <code>foldRight</code> recorren la lista en una u otra dirección en caso de que la operación no sea conmutativa (y quiera ejecutarse en un determinado orden).</li>\n  <li>La función que requieren no es, como en <code>reduce</code> <code>X x X ----&gt; X</code> sino <code>Y x X -----&gt; Y</code>. Obviamente, el valor inicial es del tipo <code>Y</code>; el resultado, también.</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048652_826620127","id":"20170516-171112_1893577664","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:299"},{"text":"%md\n### MapReduce!","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>MapReduce!</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048652_826620127","id":"20170516-171904_422027517","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:300"},{"text":"val nums = 1 until 10\nnums.map(x => x * x).reduce(_+_)\n\nnums.map(x => x * x).toList","dateUpdated":"2017-06-19T16:10:27+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nnums: scala.collection.immutable.Range = Range(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\nres121: Int = 285\n\nres123: List[Int] = List(1, 4, 9, 16, 25, 36, 49, 64, 81)\n"}]},"apps":[],"jobName":"paragraph_1497878048653_826235378","id":"20170516-171926_182923995","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:301","user":"anonymous","dateFinished":"2017-06-19T16:10:28+0200","dateStarted":"2017-06-19T16:10:27+0200"},{"text":"%md\nMapReduce es _el principio de todo_. Véase _[MapReduce: Simplified Data Processing on Large Clusters](https://research.google.com/archive/mapreduce.html)_.","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>MapReduce es <em>el principio de todo</em>. Véase <em><a href=\"https://research.google.com/archive/mapreduce.html\">MapReduce: Simplified Data Processing on Large Clusters</a></em>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048653_826235378","id":"20170516-172008_939831559","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:302"},{"text":"%md\n#### Ejercicio\nSuma los cuadrados de los múltiplos de 5 o 7 del 1 al 100.","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Ejercicio</h4>\n<p>Suma los cuadrados de los múltiplos de 5 o 7 del 1 al 100.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048654_827389624","id":"20170516-172336_1881616157","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:303"},{"text":"val ejer =(1 until 100).filter(x=> x%5==0 || x%7==0).map(x=> x*x).reduce(_+_)\n","user":"anonymous","dateUpdated":"2017-06-19T16:40:37+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497881448847_-147137777","id":"20170619-161048_1929759129","dateCreated":"2017-06-19T16:10:48+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5909","dateFinished":"2017-06-19T16:22:57+0200","dateStarted":"2017-06-19T16:22:57+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nejer: Int = 105360\n"}]}},{"text":"%md\n### Otras colecciones\n\n* Conjuntos: no tienen orden, no tienen duplicados.\n* Vectores: como las listas, pero se puede acceder a ellos por índice.\n* _Streams_: como listas, pero sin último elemento (p.e., el _stream_ de los números primos).\n* _Maps_ (o diccionarios, o _hash tables_,...): listas de elementos clave:valor.","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Otras colecciones</h3>\n<ul>\n  <li>Conjuntos: no tienen orden, no tienen duplicados.</li>\n  <li>Vectores: como las listas, pero se puede acceder a ellos por índice.</li>\n  <li><em>Streams</em>: como listas, pero sin último elemento (p.e., el <em>stream</em> de los números primos).</li>\n  <li><em>Maps</em> (o diccionarios, o <em>hash tables</em>,&hellip;): listas de elementos clave:valor.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048654_827389624","id":"20170516-172149_656402867","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:304"},{"text":"%md\n\n**Conjuntos** siempre son de elementos distintos\n**vectores** como las listas pero indexadas\n**maps** listas de parejas clave - valor","user":"anonymous","dateUpdated":"2017-06-19T16:42:37+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497883283725_-1262901962","id":"20170619-164123_2041337047","dateCreated":"2017-06-19T16:41:23+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6599","dateFinished":"2017-06-19T16:42:37+0200","dateStarted":"2017-06-19T16:42:37+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Conjuntos</strong> siempre son de elementos distintos<br/><strong>vectores</strong> como las listas pero indexadas<br/><strong>maps</strong> listas de parejas clave - valor</p>\n</div>"}]}},{"text":"val conjunto = Set(1, 1, 2, 3)\nconjunto map (_*2)","dateUpdated":"2017-06-19T16:42:41+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nconjunto: scala.collection.immutable.Set[Int] = Set(1, 2, 3)\n\nres124: scala.collection.immutable.Set[Int] = Set(2, 4, 6)\n"}]},"apps":[],"jobName":"paragraph_1497878048655_827004876","id":"20170516-173754_1443677574","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:305","user":"anonymous","dateFinished":"2017-06-19T16:42:42+0200","dateStarted":"2017-06-19T16:42:41+0200"},{"text":"val miVector = Vector(3, 2, 1)\nmiVector(0)\nmiVector filter(_ > 2)","dateUpdated":"2017-06-19T16:43:06+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmiVector: scala.collection.immutable.Vector[Int] = Vector(3, 2, 1)\n\nres125: Int = 3\n\nres126: scala.collection.immutable.Vector[Int] = Vector(3)\n"}]},"apps":[],"jobName":"paragraph_1497878048655_827004876","id":"20170516-173824_1246948972","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:306","user":"anonymous","dateFinished":"2017-06-19T16:43:07+0200","dateStarted":"2017-06-19T16:43:07+0200"},{"text":"val arroyo = Stream.from(1)\n\narroyo.map(_* 2).take(10) foreach println","dateUpdated":"2017-06-19T16:44:43+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"},"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\narroyo: scala.collection.immutable.Stream[Int] = Stream(1, ?)\n\nres129: scala.collection.immutable.Stream[Int] = Stream(1, ?)\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n"}]},"apps":[],"jobName":"paragraph_1497878048656_837393096","id":"20170516-173904_529329276","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:307","user":"anonymous","dateFinished":"2017-06-19T16:44:35+0200","dateStarted":"2017-06-19T16:44:35+0200"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497883510507_-1038660107","id":"20170619-164510_227207205","dateCreated":"2017-06-19T16:45:10+0200","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6903","text":"foreach esta pensado para funciones que no devuelven nada --> foreach println","dateUpdated":"2017-06-19T16:46:09+0200"},{"text":"%md \nEl siguiente código es un divertimento (¿ejemplo?) de cómo construir un _stream_ con los números de Fibonacci. Los _streams_ son estructuras muy relacionadas con la recursividad, como veremos.\n\nEn el código aparece la función `zip` que, a partir de dos listas (o similares) crea otra de parejas de elementos de una y otra. ","dateUpdated":"2017-06-19T15:14:08+0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>El siguiente código es un divertimento (¿ejemplo?) de cómo construir un <em>stream</em> con los números de Fibonacci. Los <em>streams</em> son estructuras muy relacionadas con la recursividad, como veremos.</p>\n<p>En el código aparece la función <code>zip</code> que, a partir de dos listas (o similares) crea otra de parejas de elementos de una y otra.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048656_837393096","id":"20170516-175246_199429371","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:308"},{"text":"val arroyo1 = Stream.from(0)\n\narroyo1.\n    zip(arroyo1.tail).\n    take(4).\n    foreach(println)\n\nval arroyo2 = arroyo1.zip(arroyo1.tail)   // Otro Stream definido a partir del anterior\n\narroyo2.map(a => a._1 + a._2).take(4) foreach println\n\nval arroyo3 = arroyo2.map(a => a._1 + a._2)  // Otro Stream más sofisticado\n\n// ¿Y si empiezo con un stream que tenga los dos primeros valores 1 y 1 y luego aplico lo anterior?\n\nval fibonacci: Stream[Int] = 1 #:: 1 #:: fibonacci.zip(fibonacci.tail).map (a => a._1 + a._2)\n\nfibonacci take(10) foreach println","dateUpdated":"2017-06-19T16:48:40+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\narroyo1: scala.collection.immutable.Stream[Int] = Stream(0, ?)\n(0,1)\n(1,2)\n(2,3)\n(3,4)\n\narroyo2: scala.collection.immutable.Stream[(Int, Int)] = Stream((0,1), ?)\n1\n3\n5\n7\n\narroyo3: scala.collection.immutable.Stream[Int] = Stream(1, ?)\n\nfibonacci: Stream[Int] = Stream(1, ?)\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n"}]},"apps":[],"jobName":"paragraph_1497878048656_837393096","id":"20170516-174652_684772040","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:309","user":"anonymous","dateFinished":"2017-06-19T16:48:42+0200","dateStarted":"2017-06-19T16:48:40+0200"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497883883927_-260175165","id":"20170619-165123_1576917029","dateCreated":"2017-06-19T16:51:23+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7056","text":"\n//Sieve of Erathostenes https://gist.github.com/motylwg/5868521\n\ndef sieve(s: Stream[Int]): Stream[Int] =\n  s.head #:: sieve(s.tail filter(_ % s.head != 0))\n                                                  \nval primes = sieve(Stream.from(2))                     \n  \nprimes.take(100).toList","dateUpdated":"2017-06-19T16:55:56+0200","dateFinished":"2017-06-19T16:51:28+0200","dateStarted":"2017-06-19T16:51:28+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nsieve: (s: Stream[Int])Stream[Int]\n\nprimes: Stream[Int] = Stream(2, ?)\n\nres166: List[Int] = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541)\n"}]}},{"text":"%md\nOtro divertimento: vamos a calcular la [secuencia de Collatz](https://en.wikipedia.org/wiki/Collatz_conjecture) del número 234:","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Otro divertimento: vamos a calcular la <a href=\"https://en.wikipedia.org/wiki/Collatz_conjecture\">secuencia de Collatz</a> del número 234:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048657_837008347","id":"20170618-213752_790391023","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:310"},{"text":"val collatz: Stream[Int] = 234 #:: collatz.map(x => {\n\n    (x, x % 2 == 0) match {\n        case (1, _)    => 1\n        case (_, true) => x / 2\n        case _         => 3 * x + 1\n    }\n    \n})\n\ncollatz.takeWhile(_ > 1) foreach println","dateUpdated":"2017-06-19T15:14:08+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ncollatz: Stream[Int] = Stream(234, ?)\n234\n117\n352\n176\n88\n44\n22\n11\n34\n17\n52\n26\n13\n40\n20\n10\n5\n16\n8\n4\n2\n"}]},"apps":[],"jobName":"paragraph_1497878048657_837008347","id":"20170516-173944_112922431","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:311"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497884251491_1552329287","id":"20170619-165731_369271133","dateCreated":"2017-06-19T16:57:31+0200","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7173","text":"Pattern matching match ---> curiosidad","dateUpdated":"2017-06-19T16:58:25+0200"},{"text":"%md\nLos mapas (conocidos también como diccionarios, _arrays_ asociativos, tablas _hash_, etc.) asocian parejas clave:valor y son fundamentales.","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Los mapas (conocidos también como diccionarios, <em>arrays</em> asociativos, tablas <em>hash</em>, etc.) asocian parejas clave:valor y son fundamentales.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048658_838162594","id":"20170516-181540_557162840","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:312"},{"text":"val mapa = Map(\"a\" -> 1, \"b\" -> 45, \"c\" -> 42)\n\nmapa mapValues(_*2)\nmapa.map (x => (x._1, x._2 * 3)) // x._1 clave x._2 valaor\nmapa.map {case (k,v) => (k, v * 3)} // creo otra pareja clave, valor donde la clave es la misma y el valor está multiplicado por 3\n\nmapa filter {case (k,v) => v > 10}","dateUpdated":"2017-06-19T17:00:46+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"},"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmapa: scala.collection.immutable.Map[String,Int] = Map(a -> 1, b -> 45, c -> 42)\n\nres168: scala.collection.immutable.Map[String,Int] = Map(a -> 2, b -> 90, c -> 84)\n\nres169: scala.collection.immutable.Map[String,Int] = Map(a -> 3, b -> 135, c -> 126)\n\nres170: scala.collection.immutable.Map[String,Int] = Map(a -> 3, b -> 135, c -> 126)\n\nres172: scala.collection.immutable.Map[String,Int] = Map(b -> 45, c -> 42)\n"}]},"apps":[],"jobName":"paragraph_1497878048659_837777845","id":"20170516-195939_971049698","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:313","user":"anonymous","dateFinished":"2017-06-19T16:58:30+0200","dateStarted":"2017-06-19T16:58:29+0200"},{"text":"%md\nRealmente, MapReduce (tal como lo plateó Google) operaba sobre parejas clave:valor, es decir, mapas. Las operaciones con este tipo de datos dependen en gran medida de la otra _gran_ operación funcional, el _group by_.","dateUpdated":"2017-06-19T15:14:08+0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Realmente, MapReduce (tal como lo plateó Google) operaba sobre parejas clave:valor, es decir, mapas. Las operaciones con este tipo de datos dependen en gran medida de la otra <em>gran</em> operación funcional, el <em>group by</em>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048660_835854100","id":"20170516-200007_154164064","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:314"},{"text":"%md\n### Mapas y groupBy\n\nLa operación _groupBy_ junta valores que cumplen ciertas propiedades como se muestra a continuación.","dateUpdated":"2017-06-19T15:14:08+0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497878048660_835854100","id":"20170516-200958_1313154989","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:315"},{"text":"val galdos = \"y entre los muertos habra siempre una lengua viva para decir que zaragoza no se rinde\"\nval letras = galdos.toList\n\nletras.groupBy(identity) // o por x => x \nletras.groupBy(identity).mapValues(_.length)","dateUpdated":"2017-06-19T17:03:02+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ngaldos: String = y entre los muertos habra siempre una lengua viva para decir que zaragoza no se rinde\n\nletras: List[Char] = List(y,  , e, n, t, r, e,  , l, o, s,  , m, u, e, r, t, o, s,  , h, a, b, r, a,  , s, i, e, m, p, r, e,  , u, n, a,  , l, e, n, g, u, a,  , v, i, v, a,  , p, a, r, a,  , d, e, c, i, r,  , q, u, e,  , z, a, r, a, g, o, z, a,  , n, o,  , s, e,  , r, i, n, d, e)\n\nres183: scala.collection.immutable.Map[Char,List[Char]] = Map(e -> List(e, e, e, e, e, e, e, e, e, e), s -> List(s, s, s, s), n -> List(n, n, n, n, n), y -> List(y), t -> List(t, t), u -> List(u, u, u, u), a -> List(a, a, a, a, a, a, a, a, a, a), m -> List(m, m), i -> List(i, i, i, i),   -> List( ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ), v -> List(v, v), q -> List(q), b -> List(b), g -> List(g, g), l -> List(l, l), p -> List(p, p), c -> List(c), h -> List(h), r -> List(r, r, r, r, r, r, r, r), o -> List(o, o, o, o), z -> List(z, z), d -> List(d, d))\n\nres184: scala.collection.immutable.Map[Char,Int] = Map(e -> 10, s -> 4, n -> 5, y -> 1, t -> 2, u -> 4, a -> 10, m -> 2, i -> 4,   -> 15, v -> 2, q -> 1, b -> 1, g -> 2, l -> 2, p -> 2, c -> 1, h -> 1, r -> 8, o -> 4, z -> 2, d -> 2)\n"}]},"apps":[],"jobName":"paragraph_1497878048661_835469351","id":"20170516-201101_704634268","dateCreated":"2017-06-19T15:14:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:316","user":"anonymous","dateFinished":"2017-06-19T17:03:02+0200","dateStarted":"2017-06-19T17:03:02+0200"},{"text":"%md\n#### Ejercicio\nUsando el siguiente pedazo de código, cuenta las consonantes y vocales en `galdos`.","dateUpdated":"2017-06-19T15:14:08+0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497878048662_836623598","id":"20170516-204225_1607118150","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:318"},{"text":"val vocales = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\nvocales.contains(\"f\")\n\n// cuenta consonantes y vocales aquí:\n\n","dateUpdated":"2017-06-19T15:14:08+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nvocales: scala.collection.immutable.Set[String] = Set(e, u, a, i, o)\n\nres32: Boolean = false\n"}]},"apps":[],"jobName":"paragraph_1497878048662_836623598","id":"20170516-204115_1293754204","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:319"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497884790816_-381113322","id":"20170619-170630_1922282221","dateCreated":"2017-06-19T17:06:30+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7507","text":"//def suma(l: List[Int]): Int = {\n//    var acc = 0\n//    for (x <- l) acc += x\n//    acc\n//}\n\nval a = Vector(3, 2, 2)\nval b = Vector(2, 1, 1)\n\n\ndef prodes(a :Vector[Int],b:Vector[Int]): Vector[Int] ={\n    a.zip(b).map(x=>x._1*x._2)\n}\n\nprodes(a,b)\n\ndef media(a:Vector[Int]):Double ={\n    \n    a.reduce(_+_)/a.length.toDouble\n}\n\nmedia(a)\n//a.map(_-media(a))\n\ndef varianza(a:Vector[Int]):Double ={\n    val b= a.map(_-media(a)).map(x=> x*x)\n b.reduce(_+_)/(b.length.toDouble -1)\n    \n}\n\nvarianza(b)\n\n\n///#### Ejercicio:\n\n///1. Busca en Google cómo generar números aleatorios en Scala. Crea una lista de números aleatorios (basta con que sean uniformes en [0, 1]).\n\nmath.random()","dateUpdated":"2017-06-19T17:38:23+0200","dateFinished":"2017-06-19T17:37:51+0200","dateStarted":"2017-06-19T17:37:50+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\na: scala.collection.immutable.Vector[Int] = Vector(3, 2, 2)\n\nb: scala.collection.immutable.Vector[Int] = Vector(2, 1, 1)\n\nprodes: (a: Vector[Int], b: Vector[Int])Vector[Int]\n\nres652: Vector[Int] = Vector(6, 2, 2)\n\nmedia: (a: Vector[Int])Double\n\nres655: Double = 2.3333333333333335\n\nvarianza: (a: Vector[Int])Double\n\nres659: Double = 0.3333333333333333\n\n\n\n<console>:32: error: Double does not take parameters\n       math.random(10)\n                  ^\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497886705079_1544434268","id":"20170619-173825_503154153","dateCreated":"2017-06-19T17:38:25+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8848","text":"(1 until 10) map(x=>math.random)\nStream.from(0)\n\nval stream = 1 #:: 2 #:: 3 #:: Stream.empty\n\nStream[10].map(x=>math.random)\n\n\n    ","dateUpdated":"2017-06-19T17:55:48+0200","dateFinished":"2017-06-19T17:55:48+0200","dateStarted":"2017-06-19T17:55:48+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\nres736: scala.collection.immutable.IndexedSeq[Double] = Vector(0.7366989396757303, 0.6168852020615816, 0.8445689434831998, 1.4259200964084062E-4, 0.7719615107408226, 0.5322017132756305, 0.3049861315538205, 0.8093284518790592, 0.9570205844991302)\n\nres737: scala.collection.immutable.Stream[Int] = Stream(0, ?)\n\nstream: scala.collection.immutable.Stream[Int] = Stream(1, ?)\n\n\n\n<console>:2: error: identifier expected but integer literal found.\nStream[10].map(x=>math.random)\n       ^\n"}]}},{"text":"%md \n## Ejercicios:\n\n#### Ejercicio:\n\nCrea una función que calcule el producto escalar de dos vectores (es posible que tengas que usar la función `zip`).\n\n\n#### Ejercicio:\n\nCrea funciones que calculen la media y la varianza de un vector.\n\n#### Ejercicio:\n\n1. Busca en Google cómo generar números aleatorios en Scala. Crea una lista de números aleatorios (basta con que sean uniformes en [0, 1]).\n2. Piensa cómo construir una funcíón que construya (sin pintarlo) el histograma en n _buckets_. Tiene que devolver el _bucket_ y el número de observaciones que caigan en él.\n\n#### Ejercicio:\n\nExiste un truco para generar números aproximadamente normales: sumar 12 v.a. uniformes en [0,1] y restar 6. Prueba a utilizar este truco para generar números aleatorios aproximadamente normales.\n\n\n#### Ejercicio:\n\nCalcula una aproximación a pi de la siguiente manera:\n\n1. Genera N parejas de números aleatorios (en [0,1]).\n2. Cuenta los que están a distancia < 1 del origen. \n3. Ten en cuenta que la proporción de estos puntos es aproximadamente pi / 4.\n\n\n#### Ejercicio:\n\nCrea una función que calcule la mediana de una lista de valores.","dateUpdated":"2017-06-19T15:14:08+0200","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Ejercicios:</h2>\n<h4>Ejercicio:</h4>\n<ol>\n  <li>Busca en Google cómo generar números aleatorios en Scala. Crea una lista de números aleatorios (basta con que sean uniformes en [0, 1]).</li>\n  <li>Piensa cómo construir una funcíón que construya (sin pintarlo) el histograma en n <em>buckets</em>. Tiene que devolver el <em>bucket</em> y el número de observaciones que caigan en él.</li>\n</ol>\n<h4>Ejercicio:</h4>\n<p>Existe un truco para generar números aproximadamente normales: sumar 12 v.a. uniformes en [0,1] y restar 6. Prueba a utilizar este truco para generar números aleatorios aproximadamente normales.</p>\n<h4>Ejercicio:</h4>\n<p>Calcula una aproximación a pi de la siguiente manera:</p>\n<ol>\n  <li>Genera N parejas de números aleatorios (en [0,1]).</li>\n  <li>Cuenta los que están a distancia &lt; 1 del origen.</li>\n  <li>Ten en cuenta que la proporción de estos puntos es aproximadamente pi / 4.</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1497878048662_836623598","id":"20170516-204156_1478201482","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:320"},{"text":"%md\n","dateUpdated":"2017-06-19T15:14:08+0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497878048663_836238849","id":"20170618-215013_939826004","dateCreated":"2017-06-19T15:14:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:321"}],"name":"/curso_spark/00_scala_colecciones","id":"2CMCKST99","angularObjects":{"2CKGQPZ2B:shared_process":[],"2CM65AZ1F:shared_process":[],"2CMQZMU1D:shared_process":[],"2CJKF6RCT:shared_process":[],"2CHTZXJ8P:shared_process":[],"2CMH855RN:shared_process":[],"2CK7JSJBV:shared_process":[],"2CK8CDVJB:shared_process":[],"2CJABPRCY:shared_process":[],"2CJCDAB81:shared_process":[],"2CKQWJJ1B:shared_process":[],"2CHQQ7C3U:shared_process":[],"2CK1GPDSC:shared_process":[],"2CJPHM4T2:shared_process":[],"2CMWUJX5J:shared_process":[],"2CK1HWU4B:shared_process":[],"2CHTZBERN:shared_process":[],"2CM38KK3A:shared_process":[],"2CMFYZJ25:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}